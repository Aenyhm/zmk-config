#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#include "helpers.h"
#include "keymap_french_alt.h"

// Alphas and OS overlays
#define DEF 0
#define WIN 1
#define MAC 2

// Symbols and Alternate Alphas
#define SYM 3
#define WIN_SYM 4
#define MAC_SYM 5

#define NUM 6 // Numbers and Function keys
#define NAV 7 // Bluetooth, Media & Navigation

// Caps lock delay by OS
#define LNX_CAPS_DELAY 10
#define MAC_CAPS_DELAY 100

/ {
  macros {
    // OS switch: disable previous toggled layers (OS overlays)
    ZMK_MACRO(win1, bindings = <&bt BT_SEL 0 &to DEF &tog WIN>;)
    ZMK_MACRO(mac2, bindings = <&bt BT_SEL 1 &to DEF &tog MAC>;)
    ZMK_MACRO(tbt3, bindings = <&bt BT_SEL 2 &to DEF>;)
    ZMK_MACRO(tbt4, bindings = <&bt BT_SEL 3 &to DEF>;)

    // `Qu`
    ZMK_MACRO(q_u, bindings = <&kp FR_Q &kp FR_U>;)
    ZMK_MACRO(q_u_up, bindings = <&kp RS(FR_Q) &kp FR_U>;) // Windows & macOS
    ZMK_MACRO(q_u_up_lnx,
      tap-ms = <LNX_CAPS_DELAY>;
      // Using Caps Lock because LSHFT/RSHFT are retained by Mod-Morph on Linux.
      bindings = <&kp CAPS &kp FR_Q &kp CAPS &kp FR_U>;
    )

    // Windows Alt Codes
    MACRO_WIN_ALT_CODE(agrv_up, 1, 9, 2)
    MACRO_WIN_ALT_CODE(oe_lo,   1, 5, 6)
    MACRO_WIN_ALT_CODE(oe_up,   1, 4, 0)
    MACRO_WIN_ALT_CODE(eacu_up, 2, 0, 1)
    MACRO_WIN_ALT_CODE(egrv_up, 2, 0, 0)

    // macOS
    ZMK_MACRO(mac_agrv_up,
      tap-ms = <MAC_CAPS_DELAY>;
      bindings = <&kp CAPS &kp FR_AGRV &kp CAPS>;
    )
  };

  behaviors {
    MORPH(bsp_del, &kp BSPC, LCTL, &kp DEL)

    // Letters
    MORPH(agrv, &kp FR_AGRV, LSFT, &kp FR_AGRV_UP)
    MORPH(cced, &kp FR_CCED, LSFT, &kp FR_CCED_UP)
    MORPH(eacu, &kp FR_EACU, LSFT, &kp FR_EACU_UP)
    MORPH(egrv, &kp FR_EGRV, LSFT, &kp FR_EGRV_UP)
    MORPH(oe,   &kp FR_OE,   LSFT, &kp FR_OE_UP)

    // `Qu`
    MORPH(qu,     &q_u, LSFT, &q_u_up)
    MORPH(qu_lnx, &q_u, LSFT, &q_u_up_lnx)

    // Symbols
    MORPH(caret_excl,   &kp FR_CARET, LSFT, &kp FR_EXCL)
    MORPH(comma_semi,   &kp FR_COMMA, LSFT, &kp FR_SEMI)
    MORPH(dot_colon,    &kp FR_DOT,   LSFT, &kp FR_COLON)
    MORPH(dqt_apos,     &kp FR_DQT,   LSFT, &kp FR_APOS)
    MORPH(minus_emdash, &kp FR_MINUS, LSFT, &kp FR_EMDASH)
    MORPH(sqt_qmark,    &kp FR_SQT,   LSFT, &kp FR_QMARK)
    MORPH(unds_ddd,     &kp FR_UNDS,  LSFT, &kp FR_DDD)

    // Windows
    MORPH(win_agrv, &agrv,      LSFT, &win_agrv_up)
    MORPH(win_eacu, &eacu,      LSFT, &win_eacu_up)
    MORPH(win_egrv, &egrv,      LSFT, &win_egrv_up)
    MORPH(win_oe,   &win_oe_lo, LSFT, &win_oe_up)

    // macOS
    MORPH(mac_agrv, &agrv, LSFT, &mac_agrv_up)
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";
    win_sym_layer { if-layers = <WIN SYM>; then-layer = <WIN_SYM>; };
    mac_sym_layer { if-layers = <MAC SYM>; then-layer = <MAC_SYM>; };
  };

  keymap {
    compatible = "zmk,keymap";

    def_layer {
      label = "DEFAULT";
      /*
      ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
      │ TAB │  À  │  J  │  O  │  É  │  B  │   │  F  │  D  │  L  │ ' ? │  Qu │  X  │
      │C]ESC│  A  │  I  │  E  │  U  │ , ; │   │  P  │  T  │  S  │  R  │  N  │ ^ ! │
      │ GUI │  K  │  Y  │  È  │ . : │  W  │   │  G  │  C  │  M  │  H  │  V  │  Z  │
      ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                        │ ALT │ SYM │N]SPC│   │S]ENT│ NUM │B/DEL│
                        ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
      */
      bindings = <
&kp TAB        &agrv     &kp FR_J  &kp FR_O   &eacu       &kp FR_B       &kp FR_F       &kp FR_D  &kp FR_L  &sqt_qmark  &qu_lnx   &kp FR_X
&mt LCTRL ESC  &kp FR_A  &kp FR_I  &kp FR_E   &kp FR_U    &comma_semi    &kp FR_P       &kp FR_T  &kp FR_S  &kp FR_R    &kp FR_N  &caret_excl
&kp LGUI       &kp FR_K  &kp FR_Y  &egrv      &dot_colon  &kp FR_W       &kp FR_G       &kp FR_C  &kp FR_M  &kp FR_H    &kp FR_V  &kp FR_Z
                                   &kp LALT   &mo SYM     &lt NAV SPC    &mt LSHFT RET  &mo NUM   &bsp_del
      >;
    };

    win_layer {
      label = "WINDOWS";
      bindings = <
___  &win_agrv  ___  ___        &win_eacu  ___    ___  ___  ___  ___  &qu  ___
___  ___        ___  ___        ___        ___    ___  ___  ___  ___  ___  ___
___  ___        ___  &win_egrv  ___        ___    ___  ___  ___  ___  ___  ___
___  ___  ___  ___  ___  ___
      >;
    };

    mac_layer {
      label = "MAC OS";
      bindings = <
___  &mac_agrv  ___  ___  ___  ___    ___  ___  ___  ___  &qu  ___
___  ___        ___  ___  ___  ___    ___  ___  ___  ___  ___  ___
___  ___        ___  ___  ___  ___    ___  ___  ___  ___  ___  ___
___  ___  ___  ___  ___  ___
      >;
    };

    sym_layer {
      label = "SYMBOLS";
      /*
            ┌─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
            │  <  │  >  │ œ Œ │  \  │  `  │   │  *  │  /  │  [  │  ]  │  «  │  »  │
            │  @  │ " ’ │ _ … │  ù  │  =  │   │  +  │ - — │  (  │  )  │  #  │  ¨  │
            │     │  ~  │  &  │  |  │  %  │   │     │ ç Ç │  {  │  }  │  €  │  $  │
            └─────┴─────┴─────┴─────┴─────┘   └─────┴─────┴─────┴─────┴─────┴─────╯
      */
      bindings = <
___  &kp FR_LT  &kp FR_GT    &oe          &kp FR_BSLS  &kp FR_GRAVE      &kp FR_ASTR  &kp FR_SLSH    &kp FR_LBRC  &kp FR_RBRC  &kp FR_QML   &kp FR_QMR
___  &kp FR_AT  &dqt_apos    &unds_ddd    &kp FR_UGRV  &kp FR_EQUAL      &kp FR_PLUS  &minus_emdash  &kp FR_LPRN  &kp FR_RPRN  &kp FR_HASH  &kp FR_DIAE
___  &none      &kp FR_TILD  &kp FR_AMPR  &kp FR_PIPE  &kp FR_PERCENT    &none        &cced          &kp FR_LCBR  &kp FR_RCBR  &kp FR_EURO  &kp FR_DLR
___  ___  ___  ___  ___  ___
      >;
    };

    win_sym_layer {
      label = "WIN SYM";
      bindings = <
___  ___  ___  &win_oe  ___  ___    ___  ___  ___  ___  ___  ___
___  ___  ___  ___      ___  ___    ___  ___  ___  ___  ___  ___
___  ___  ___  ___      ___  ___    ___  ___  ___  ___  ___  ___
___  ___  ___  ___  ___  ___
      >;
    };

    mac_sym_layer {
      label = "MAC SYM";
      bindings = <
___  &kp FR_QML  ___  ___  ___  ___    ___  ___  ___  ___  ___  ___
___  ___         ___  ___  ___  ___    ___  ___  ___  ___  ___  ___
___  ___         ___  ___  ___  ___    ___  ___  ___  ___  ___  ___
___  ___  ___  ___  ___  ___
      >;
    };

    num_layer {
      label = "NUMBERS";
      /*
            ┌─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
            │ F1  │ F2  │ F3  │ F4  │ F5  │   │ F6  │ F7  │ F8  │ F9  │ F10 │ F11 │
            │  1  │  2  │  3  │  4  │  5  │   │  6  │  7  │  8  │  9  │  0  │ F12 │
            │  ¹  │  ²  │  ³  │     │     │   │     │     │     │     │  °  │     │
            └─────┴─────┴─────┴─────┴─────┘   └─────┴─────┴─────┴─────┴─────┴─────╯
      */
      bindings = <
___  &kp F1      &kp F2      &kp F3      &kp F4     &kp F5       &kp F6     &kp F7     &kp F8     &kp F9     &kp F10     &kp F11
___  &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_N4  &kp KP_N5    &kp KP_N6  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_N0   &kp F12
___  &kp FR_1UP  &kp FR_2UP  &kp FR_3UP  &none      &none        &none      &none      &none      &none      &kp FR_DEG  &none
___  ___  ___  ___  ___  ___
      >;
    };

    nav_layer {
      label = "NAVIG";
      /*
            ┌─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
            │RESET│     │     │     │BTCLR│   │PREV │PLAY │NEXT │MUTE │VDWN │ VUP │
            │WIN1 │MAC2 │ BT3 │ BT4 │USBTt│   │     │  ←  │  ↓  │  ↑  │  →  │     │
            │     │     │     │     │     │   │ INS │HOME │ PDN │ PUP │ END │PSCRN│
            └─────┴─────┴─────┴─────┴─────┘   └─────┴─────┴─────┴─────┴─────┴─────╯
      */
      bindings = <
___  &bootloader  &none  &none  &none  &bt BT_CLR      &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP
___  &win1        &mac2  &tbt3  &tbt4  &out OUT_TOG    &none       &kp LEFT  &kp DOWN    &kp UP      &kp RIGHT     &none
___  &none        &none  &none  &none  &none           &kp INS     &kp HOME  &kp PG_DN   &kp PG_UP   &kp END       &kp PSCRN
___  ___  ___  ___  ___  ___
      >;
    };

  };
};
