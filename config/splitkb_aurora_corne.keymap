#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#include "node_free.h"
#include "layers.h"
#include "keyboards/linux.h"
#include "keyboards/windows.h"
#include "keyboards/macos.h"

#define ___ &trans

/*
    ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
    │ TAB │  À  │  J  │  O  │  É  │  B  │   │  F  │  D  │  L  │ ' ? │  Qu │  X  │
    │C]ESC│  A  │  I  │  E  │  U  │ , ; │   │  P  │  T  │  S  │  R  │  N  │ ^ ! │
    │ GUI │  K  │  Y  │  È  │ . : │  W  │   │  G  │  C  │  M  │  H  │  V  │  Z  │
    ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                      │ ALT │ SYM │N]SPC│   │S]ENT│ NUM │B/DEL│
                      ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/

// /!\ CTRL+BKSP / ALT+BKSP = delete word
//  CTRL+SHFT+BKSP / CMD+BKSP = delete line
MORPH(bsp_del, &kp BSPC, LCTL, &kp DEL)

MACRO(q_u, bindings = <&kp FR_Q &kp FR_U>;)
MACRO(q_u_up_lnx,
  tap-ms = <LNX_CAPS_DELAY>;
  // Using Caps Lock because LSHFT/RSHFT are retained by Mod-Morph on Linux.
  bindings = <&kp CAPS &kp FR_Q &kp CAPS &kp FR_U>;
)
MORPH_UP(qu_lnx, &q_u, &q_u_up_lnx)

MORPH_UP(agrv, &kp FR_AGRV, &kp FR_AGRV_UP)
MORPH_UP(eacu, &kp FR_EACU, &kp FR_EACU_UP)
MORPH_UP(egrv, &kp FR_EGRV, &kp FR_EGRV_UP)

MORPH_UP(caret_excl, &kp FR_CARET, &kp FR_EXCL)
MORPH_UP(comma_semi, &kp FR_COMMA, &kp FR_SEMI)
MORPH_UP(dot_colon,  &kp FR_DOT,   &kp FR_COLON)
MORPH_UP(sqt_qmark,  &kp FR_SQT,   &kp FR_QMARK)

LAYER(DEFAULT,
  &kp TAB        &agrv     &kp FR_J  &kp FR_O   &eacu       &kp FR_B       &kp FR_F       &kp FR_D  &kp FR_L  &sqt_qmark  &qu_lnx   &kp FR_X
  &mt LCTRL ESC  &kp FR_A  &kp FR_I  &kp FR_E   &kp FR_U    &comma_semi    &kp FR_P       &kp FR_T  &kp FR_S  &kp FR_R    &kp FR_N  &caret_excl
  &kp LGUI       &kp FR_K  &kp FR_Y  &egrv      &dot_colon  &kp FR_W       &kp FR_G       &kp FR_C  &kp FR_M  &kp FR_H    &kp FR_V  &kp FR_Z
                                     &kp LALT   &mo SYM     &lt NAV SPC    &mt LSHFT RET  &mo NUM   &bsp_del
)

MACRO(q_u_up, bindings = <&kp RS(FR_Q) &kp FR_U>;) // Windows & macOS
MORPH_UP(qu, &q_u, &q_u_up)

MORPH_UP(win_agrv, &kp FR_AGRV, &win_agrv_up)
MORPH_UP(win_eacu, &kp FR_EACU, &win_eacu_up)
MORPH_UP(win_egrv, &kp FR_EGRV, &win_egrv_up)

LAYER(WINDOWS,
  ___  &win_agrv  ___  ___        &win_eacu  ___    ___  ___  ___  ___  &qu  ___
  ___  ___        ___  ___        ___        ___    ___  ___  ___  ___  ___  ___
  ___  ___        ___  &win_egrv  ___        ___    ___  ___  ___  ___  ___  ___
  ___  ___  ___  ___  ___  ___
)

MORPH_UP(mac_agrv, &kp FR_AGRV, &mac_agrv_up)
MORPH_UP(mac_eacu, &kp FR_EACU, &mac_eacu_up)
MORPH_UP(mac_egrv, &kp FR_EGRV, &mac_egrv_up)
MORPH_UP(mac_caret_excl, &kp FR_CARET, &kp MAC_EXCL)

LAYER(MACOS,
  ___  &mac_agrv  ___  ___        &mac_eacu  ___    ___  ___  ___  ___  &qu  ___
  ___  ___        ___  ___        ___        ___    ___  ___  ___  ___  ___  &mac_caret_excl
  ___  ___        ___  &mac_egrv  ___        ___    ___  ___  ___  ___  ___  ___
  ___  ___  ___  ___  ___  ___
)


/*
          ┌─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
          │  <  │  >  │ œ Œ │  \  │  `  │   │  *  │  /  │  [  │ ] ¿ │  «  │  »  │
          │  @  │ " ’ │ _ … │  ù  │  =  │   │  +  │ - — │  (  │  )  │  #  │ ¨ ¡ │
          │  '  │  ~  │  &  │  |  │  %  │   │     │ ç Ç │  {  │  }  │  €  │  $  │
          └─────┴─────┴─────┴─────┴─────┘   └─────┴─────┴─────┴─────┴─────┴─────╯
*/

// Row 1
MORPH_UP(_lt,      &kp FR_LT,    &none)
MORPH_UP(gt,       &kp FR_GT,    &none)
MORPH_UP(oe,       &kp FR_OE,    &kp FR_OE_UP)
MORPH_UP(bsls,     &kp FR_BSLS,  &none)
MORPH_UP(grave2,   &kp FR_GRAVE, &kp FR_GRAVD)
MORPH_UP(astr,     &kp FR_ASTR,  &none)
MORPH_UP(slsh,     &kp FR_SLSH,  &none)
MORPH_UP(lbrc,     &kp FR_LBRC,  &none)
MORPH_UP(rbrc_iqm, &kp FR_RBRC,  &kp FR_IQM)
MORPH_UP(qml,      &kp FR_QML,   &none)
MORPH_UP(qmr,      &kp FR_QMR,   &none)
// Row 2
MORPH_UP(at,       &kp FR_AT,    &none)
MORPH_UP(dqt_apos, &kp FR_DQT,   &kp FR_APOS)
MORPH_UP(unds_ddd, &kp FR_UNDS,  &kp FR_DDD)
MORPH_UP(ugrv,     &kp FR_UGRV,  &none)
MORPH_UP(equal,    &kp FR_EQUAL, &none)
MORPH_UP(plus,     &kp FR_PLUS,  &none)
MORPH_UP(minus_em, &kp FR_MINUS, &kp FR_EMDASH)
MORPH_UP(lprn,     &kp FR_LPRN,  &none)
MORPH_UP(rprn,     &kp FR_RPRN,  &none)
MORPH_UP(hash,     &kp FR_HASH,  &none)
MORPH_UP(diae_iem, &kp FR_DIAE,  &kp FR_IEM)
// Row 3
MORPH_UP(acute,    &kp FR_ACUTE, &none)
MORPH_UP(tild2,    &kp FR_TILD,  &kp FR_TILDD)
MORPH_UP(ampr,     &kp FR_AMPR,  &none)
MORPH_UP(pipe,     &kp FR_PIPE,  &none)
MORPH_UP(prcnt,    &kp FR_PRCNT, &none)
MORPH_UP(cced,     &kp FR_CCED,  &kp FR_CCED_UP)
MORPH_UP(prcnt,    &kp FR_PRCNT, &none)
MORPH_UP(lcbr,     &kp FR_LCBR,  &none)
MORPH_UP(rcbr,     &kp FR_RCBR,  &none)
MORPH_UP(euro,     &kp FR_EURO,  &none)
MORPH_UP(dlr,      &kp FR_DLR,   &none)

LAYER(SYMBOLS,
  ___  &_lt   &gt        &oe        &bsls  &grave2    &astr  &slsh      &lbrc  &rbrc_iqm  &qml   &qmr
  ___  &at    &dqt_apos  &unds_ddd  &ugrv  &equal     &plus  &minus_em  &lprn  &rprn      &hash  &diae_iem
  ___  &none  &tild2     &ampr      &pipe  &prcnt     &none  &cced      &lcbr  &rcbr      &euro  &dlr
  ___  ___  ___  ___  ___  ___
)

// Row 1
MORPH_UP(win_oe,       &win_oe_lo,   &win_oe_up)
MORPH_UP(win_grave2,   &win_grave,   &kp WIN_GRAVD)

MORPH_UP(win_rbrc_iqm, &kp FR_RBRC,  &win_iqm)
// Row 2
MORPH_UP(win_dqt_apos, &kp FR_DQT,   &win_apos)
MORPH_UP(win_unds_ddd, &kp FR_UNDS,  &win_ddd)
MORPH_UP(win_minus_em, &kp FR_MINUS, &win_emdash)
MORPH_UP(win_diae_iem, &kp FR_DIAE,  &win_iem)
// Row 3
MORPH_UP(win_tild2,    &win_tild,    &kp WIN_TILDD)
MORPH_UP(win_cced,     &kp FR_CCED,  &win_cced_up)

LAYER(WINSYM,
  ___  ___  ___            &win_oe        ___  &win_grave2    ___  ___            ___  &win_rbrc_iqm  &win_qml  &win_qmr
  ___  ___  &win_dqt_apos  &win_unds_ddd  ___  ___            ___  &win_minus_em  ___  ___            ___       &win_diae_iem
  ___  ___  &win_tild2     ___            ___  ___            ___  &win_cced      ___  ___            ___       ___
  ___  ___  ___  ___  ___  ___
)

// Row 1
MORPH_UP(mac_bsls,     &kp MAC_BSLS,  &none)
MORPH_UP(mac_grave,    &kp MAC_GRAVD, &none)
MORPH_UP(mac_astr,     &kp MAC_ASTR,  &none)
MORPH_UP(mac_lbrc,     &kp MAC_LBRC,  &none)
MORPH_UP(mac_rbrc_iqm, &kp MAC_RBRC,  &kp MAC_IQM)
MORPH_UP(mac_qml,      &kp MAC_QML,   &none)
MORPH_UP(mac_qmr,      &kp MAC_QMR,   &none)
// Row 2
MORPH_UP(mac_at,       &kp MAC_AT,    &none)
MORPH_UP(mac_dqt_apos, &kp FR_DQT,    &kp MAC_APOS)
MORPH_UP(mac_unds_ddd, &kp MAC_UNDS,  &kp MAC_DDD)
MORPH_UP(mac_equal,    &kp MAC_EQUAL, &none)
MORPH_UP(mac_plus,     &kp MAC_PLUS,  &none)
MORPH_UP(mac_minus_em, &kp MAC_MINUS, &kp MAC_EMDASH)
MORPH_UP(mac_hash,     &kp MAC_HASH,  &none)
MORPH_UP(mac_diae_iem, &kp FR_DIAE,   &kp MAC_IEM)
// Row 3
MORPH_UP(mac_tild,     &kp MAC_TILDD, &none)
MORPH_UP(mac_pipe,     &kp MAC_PIPE,  &none)
MORPH_UP(mac_cced,     &kp FR_CCED,   &kp MAC_CCED_UP)
MORPH_UP(mac_lcbr,     &kp MAC_LCBR,  &none)
MORPH_UP(mac_rcbr,     &kp MAC_RCBR,  &none)
MORPH_UP(mac_euro,     &kp MAC_EURO,  &none)

LAYER(MACSYM,
  ___  ___      ___            ___            &mac_bsls  &mac_grave    &mac_astr  ___        &mac_lbrc      &mac_rbrc_iqm  &mac_qml   &mac_qmr
  ___  &mac_at  &mac_dqt_apos  &mac_unds_ddd  ___        &mac_equal    &mac_plus  ___        &mac_minus_em  ___            &mac_hash  &mac_diae_iem
  ___  ___      &mac_tild      ___            &mac_pipe  ___           ___        &mac_cced  &mac_lcbr      &mac_rcbr      &mac_euro  ___
  ___  ___  ___  ___  ___  ___
)


/*
          ┌─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
          │ F1  │ F2  │ F3  │ F4  │ F5  │   │ F6  │ F7  │ F8  │ F9  │ F10 │ F11 │
          │  1  │  2  │  3  │  4  │  5  │   │  6  │  7  │  8  │  9  │  0  │ F12 │
          │  ¹  │  ²  │  ³  │     │     │   │     │     │     │     │  °  │     │
          └─────┴─────┴─────┴─────┴─────┘   └─────┴─────┴─────┴─────┴─────┴─────╯
*/

LAYER(NUMBERS,
  ___  &kp F1      &kp F2      &kp F3      &kp F4     &kp F5       &kp F6     &kp F7     &kp F8     &kp F9     &kp F10     &kp F11
  ___  &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_N4  &kp KP_N5    &kp KP_N6  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_N0   &kp F12
  ___  &kp FR_1UP  &kp FR_2UP  &kp FR_3UP  &none      &none        &none      &none      &none      &none      &kp FR_DEG  &none
  ___  ___  ___  ___  ___  ___
)

LAYER(WINNUM,
  ___  ___       ___  ___       ___  ___    ___  ___  ___  ___  ___  ___
  ___  ___       ___  ___       ___  ___    ___  ___  ___  ___  ___  ___
  ___  &win_1up  ___  &win_3up  ___  ___    ___  ___  ___  ___  ___  ___
  ___  ___  ___  ___  ___  ___
)

LAYER(MACNUM,
  ___  ___    ___    ___    ___  ___    ___  ___  ___  ___  ___  ___
  ___  ___    ___    ___    ___  ___    ___  ___  ___  ___  ___  ___
  ___  &none  &none  &none  ___  ___    ___  ___  ___  ___  ___  ___
  ___  ___  ___  ___  ___  ___
)


/*
          ┌─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
          │     │     │     │     │     │   │PREV │PLAY │NEXT │MUTE │VDWN │ VUP │
          │UNDO │ CUT │COPY │PASTE│REDO │   │CAPS │  ←  │  ↓  │  ↑  │  →  │     │
          │     │     │     │     │     │   │ INS │HOME │ PDN │ PUP │ END │PSCRN│
          └─────┴─────┴─────┴─────┴─────┘   └─────┴─────┴─────┴─────┴─────┴─────╯
*/

LAYER(NAVIG,
  ___  &none         &none        &none         &none          &none           &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP
  ___  &kp LNX_UNDO  &kp LNX_CUT  &kp LNX_COPY  &kp LNX_PASTE  &kp LNX_REDO    &kp CAPS    &kp LEFT  &kp DOWN    &kp UP      &kp RIGHT     &none
  ___  &none         &none        &none         &none          &none           &kp INS     &kp HOME  &kp PG_DN   &kp PG_UP   &kp END       &kp PSCRN
  ___  ___  ___  ___  ___  ___
)

LAYER(WINNAV,
  ___  ___           ___          ___           ___            ___             ___  ___  ___  ___  ___  ___
  ___  &kp WIN_UNDO  &kp WIN_CUT  &kp WIN_COPY  &kp WIN_PASTE  &kp WIN_REDO    ___  ___  ___  ___  ___  ___
  ___  ___           ___          ___           ___            ___             ___  ___  ___  ___  ___  ___
  ___  ___  ___  ___  ___  ___
)

LAYER(MACNAV,
  ___  ___           ___          ___           ___            ___             ___  ___  ___  ___  ___  ___
  ___  &kp MAC_UNDO  &kp MAC_CUT  &kp MAC_COPY  &kp MAC_PASTE  &kp MAC_REDO    ___  ___  ___  ___  ___  ___
  ___  ___           ___          ___           ___            ___             ___  ___  ___  ___  ___  ___
  ___  ___  ___  ___  ___  ___
)


/*
    ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
    │RESET│     │     │     │     │     │   │BTCLR│     │     │     │     │RESET│
    │     │WIN1 │MAC2 │ BT3 │ BT4 │     │   │     │     │     │     │     │     │
    │     │     │     │     │     │     │   │USBTt│     │     │     │     │     │
    ╰─────┴─────┴─────┴─────┴─────┴─────┘   └─────┴─────┴─────┴─────┴─────┴─────╯
*/

// OS switch: disable previous toggled layers (OS overlays)
MACRO(win1, bindings = <&bt BT_SEL 0 &to DEF &tog WIN>;)
MACRO(mac2, bindings = <&bt BT_SEL 1 &to DEF &tog MAC>;)
MACRO(tbt3, bindings = <&bt BT_SEL 2 &to DEF>;)
MACRO(tbt4, bindings = <&bt BT_SEL 3 &to DEF>;)

LAYER(ADMIN,
  &bootloader  &none  &none  &none  &none  &none    &bt BT_CLR    &none  &none  &none  &none  &bootloader
  &none        &win1  &mac2  &tbt3  &tbt4  &none    &none         &none  &none  &none  &none  &none
  &none        &none  &none  &none  &none  &none    &out OUT_TOG  &none  &none  &none  &none  &none
  ___  ___  ___  ___  ___  ___
)
